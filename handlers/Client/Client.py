from bot_telegram import bot
from aiogram import Dispatcher, types
from keyboards.kb_client import keyboard_menu
from keyboards.kb_client_settings import keyboard_settings

from database.db_create import CT_UserBonds
from database.db_insert_change import IC_UserInformation, IC_UserStartSetting, IC_UserBonds
from database.db_receive import RE_UserSettings, RE_SuitablePapers, RE_GetPaper, RE_GetPages


previous_pagen_data = {}


# @dp.message_handler(commands=['start'], state='*')
async def cmd_Start(message: types.Message):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.row(*keyboard_menu["–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"])
    kb.row(*keyboard_menu["–ü—Ä–æ—á–µ–µ"])
    kb.row(*keyboard_menu["–ë—É–º–∞–≥–∏"])

    information_user = {
        "ID": message.from_user.id,
        "Name": message.from_user.first_name,
        "User_name": message.from_user.username,
        "Access": 'False'
    }

    IC_UserInformation(information_user)
    IC_UserStartSetting(information_user["ID"])
    CT_UserBonds(information_user["ID"])

    await bot.send_message(chat_id=message.from_user.id,
                           text='–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏[¬†](https://goo.su/VKUr)',
                           reply_markup=kb)


# @dp.callback_query_handlers(text='Menu', state='*')
async def cb_Menu(callback: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.row(*keyboard_menu["–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"])
    kb.row(*keyboard_menu["–ü—Ä–æ—á–µ–µ"])
    kb.row(*keyboard_menu["–ë—É–º–∞–≥–∏"])
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏[¬†](https://goo.su/VKUr)', reply_markup=kb)


# @dp.callback_query_handlers(text='MenuSetting', state='*')
async def cb_Setting(callback: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(*keyboard_menu["–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫ –ø–æ–≥–∞—à–µ–Ω–∏—é"])
    kb.row(*keyboard_menu["–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫—É–ø–æ–Ω–∞ –∫ –Ω–æ–º–∏–Ω–∞–ª—É"])
    kb.row(*keyboard_menu["–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫—É–ø–æ–Ω–∞ –∫ —Ä—ã–Ω–∫—É"])
    kb.add(*keyboard_menu["–û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"])
    kb.row(*keyboard_menu["–ú–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"], *keyboard_menu["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"])

    await callback.message.edit_text(
        '[–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –±—É–º–∞–≥](https://telegra.ph/Kak-nastroit-parametry-03-19)',
        reply_markup=kb)


# @dp.callback_query_handlers(text='CollectPapers', state='*')
async def cb_CollectPapers(callback: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(*keyboard_menu["–ú–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"], *keyboard_menu["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"])

    previous_pagen_data[callback.from_user.id] = 1
    bonds = RE_SuitablePapers(callback.from_user.id, )
    if bonds is not None:
        await bot.answer_callback_query(callback_query_id=callback.id,
                                        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –º—ã —É–∂–µ –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±—É–º–∞–≥–∏', show_alert=True)
        IC_UserBonds((callback.from_user.id, bonds))
        await cb_GetPapers(callback)
    else:
        await bot.answer_callback_query(callback_query_id=callback.id,
                                        text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –±—É–º–∞–≥ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç.\n'
                                             '–ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!', show_alert=True)


# @dp.callback_query_handlers(text='GetPapers', state='*')
async def cb_GetPapers(callback: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(row_width=2)
    
    kb.row(*keyboard_settings["–°—Ç—Ä–∞–Ω–∏—Ü—ã"])
    kb.row(*keyboard_menu["–ú–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"], *keyboard_menu["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"])

    bond = RE_GetPaper(callback.from_user.id, previous_pagen_data[callback.from_user.id])
    total_pages = RE_GetPages(callback.from_user.id)
    if bond is not None:
        await callback.message.edit_text(f'URL: {bond["URL"]}\n\n'
                                         f'–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏: {bond["–ù–∞–∑–≤–∞–Ω–∏–µ"]}\n\n'
                                         f'–ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –æ–±–ª–∏–≥–∞—Ü–∏–∏: {bond["–ö–æ—Ç–∏—Ä–æ–≤–∫–∞"]}%\n\n'
                                         f'–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫ –ø–æ–≥–∞—à–µ–Ω–∏—é: {bond["–ö –ø–æ–≥–∞—à–µ–Ω–∏—é"]}%\n\n'
                                         f'–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫—É–ø–æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã: {bond["–ö —Ä—ã–Ω–∫—É"]}%\n\n'
                                         f'–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫—É–ø–æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã: {bond["–ö –Ω–æ–º–∏–Ω–∞–ª—É"]}%\n\n'
                                         f'–ß–∞—Å—Ç–æ—Ç–∞ –∫—É–ø–æ–Ω–∞: {bond["–ß–∞—Å—Ç–æ—Ç–∞"]} —Ä–∞–∑ –≤ –≥–æ–¥\n\n'
                                         f'–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –æ–±–ª–∏–≥–∞—Ü–∏–∏: {bond["–î–∞—Ç–∞"]}\n\n'
                                         f'–î–Ω–µ–π –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è: {bond["–î–Ω–µ–π"]} –¥–Ω–µ–π\n\n'
                                         f'ISIN: {bond["ISIN"]}\n\n'
                                         f'–ö–æ–¥ –æ–±–ª–∏–≥–∞—Ü–∏–∏: {bond["–ö–æ–¥"]}\n\n'
                                         f'–¢–æ–ª—å–∫–æ –¥–ª—è –∫–≤–∞–ª–æ–≤? {bond["–°—Ç–∞—Ç—É—Å"]}\n\n'
                                         f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: \n{bond["–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"]}\n\n'
                                         f'{" "*30}*{previous_pagen_data[callback.from_user.id]} –∏–∑ {total_pages}*',
                                         reply_markup=kb)


# @dp.callback_query_handlers(text='Next', state='*')
async def cb_NextPapers(callback: types.CallbackQuery):
    total_pages = RE_GetPages(callback.from_user.id)
    if previous_pagen_data[callback.from_user.id] < total_pages:
        previous_pagen_data[callback.from_user.id] += 1
        await cb_GetPapers(callback)
    else:
        await bot.answer_callback_query(callback_query_id=callback.id,
                                        text='–≠—Ç–æ –±—ã–ª–∏ –≤—Å–µ –±—É–º–∞–≥–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!', show_alert=True)
        await cb_GetPapers(callback)

# @dp.callback_query_handlers(text='Back', state='*')
async def cb_BackPapers(callback: types.CallbackQuery):
    if previous_pagen_data[callback.from_user.id] != 1:
        previous_pagen_data[callback.from_user.id] -= 1
        await cb_GetPapers(callback)
    else:
        await bot.answer_callback_query(callback_query_id=callback.id,
                                        text='–¢–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç!', show_alert=True)
        await cb_CollectPapers(callback)


# @dp.callback_query_handlers(text='Params', state='*')
async def cb_Params(callback: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(*keyboard_menu["–ù–∞–∑–∞–¥"])
    kb.row(*keyboard_menu["–û—á–∏—Å—Ç–∏—Ç—å"], *keyboard_menu["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"])

    information_params = RE_UserSettings(callback.from_user.id, )

    await callback.message.edit_text(
        f'*–ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π:* \nüî∏_{"N >" if information_params["quoting"] != "‚Äî" else ""} '
        f'{information_params["quoting"]}{"%" if information_params["quoting"] != "‚Äî" else ""}_\n\n'

        f'*–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫ –ø–æ–≥–∞—à–µ–Ω–∏—é:* \nüî∏_{"N >" if information_params["repayment"] != "‚Äî" else ""} '
        f'{information_params["repayment"]}{"%" if information_params["repayment"] != "‚Äî" else ""}_\n\n'

        f'*–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫—É–ø–æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–º–∏–Ω–∞–ª–∞:* \nüî∏_{"N >" if information_params["nominal"] != "‚Äî" else ""} '
        f'{information_params["nominal"]}{"%" if information_params["nominal"] != "‚Äî" else ""}_\n\n'

        f'*–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫—É–ø–æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã:* \nüî∏_{"N >" if information_params["market"] != "‚Äî" else ""} '
        f'{information_params["market"]}{"%" if information_params["market"] != "‚Äî" else ""}_\n\n'

        f'*–ß–∞—Å—Ç–æ—Ç–∞ –∫—É–ø–æ–Ω–∞:* \nüî∏_{"N =" if information_params["frequency"] != "‚Äî" else ""} '
        f'{information_params["frequency"]} {"—Ä–∞–∑(–∞) –≤ –≥–æ–¥" if information_params["frequency"] != "‚Äî" else ""}_\n\n'

        f"""*–î–Ω–µ–π –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:* \nüî∏_{f'N {">=" if information_params["days"] == 365 else "<"}' if information_params["days"] != "‚Äî" else ""} {information_params["days"]}"""
        f'{"–¥–Ω–µ–π" if information_params["days"] != "‚Äî" else ""}_\n\n'

        f'*–ï—Å–ª–∏ –ª–∏ —É –≤–∞—Å —Å—Ç–∞—Ç—É—Å –∫–≤–∞–ª. –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞:* \nüî∏_{information_params["qualification"]}_\n\n',
        reply_markup=kb)


# @dp.callback_query_handlers(text='Information', state='*')
async def cb_Information(callback: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.row(*keyboard_menu["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"])
    await callback.message.edit_text('[–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ](https://telegra.ph/Informaciya-o-bote-03-19)',
                                     reply_markup=kb)


# @dp.callback_query_handlers(text='Reset', state='*')
async def cb_Reset(callback: types.CallbackQuery):
    IC_UserStartSetting(callback.from_user.id, )
    await bot.answer_callback_query(callback_query_id=callback.id,
                                    text='–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!',
                                    show_alert=True)
    await cb_Params(callback)


# @dp.message_handler(content_types=types.ContentType.ANY, state='*')
async def cmd_DeleteMessage(message: types.Message):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(cmd_Start, commands=['start'], state='*')
    dp.register_callback_query_handler(cb_Menu, text='Menu', state='*')
    dp.register_callback_query_handler(cb_Setting, text='MenuSetting', state='*')

    dp.register_callback_query_handler(cb_Params, text='Params', state='*')
    dp.register_callback_query_handler(cb_Reset, text='Reset', state='*')

    dp.register_callback_query_handler(cb_Information, text='Information', state='*')

    dp.register_callback_query_handler(cb_CollectPapers, text='CollectPapers', state='*')

    dp.register_callback_query_handler(cb_NextPapers, text='Next', state='*')
    dp.register_callback_query_handler(cb_GetPapers, text='GetPapers', state='*')
    dp.register_callback_query_handler(cb_BackPapers, text='Back', state='*')

    dp.register_message_handler(cmd_DeleteMessage, content_types=types.ContentType.ANY, state='*')
